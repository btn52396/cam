//@version=6
indicator(title="RSI + VWAP Indicator", shorttitle="RSI+VWAP", overlay=true)

// =========================================================================
// =                           VWAP SETTINGS                                =
// =========================================================================
hideonDWM = input(false, title="Hide VWAP on 1D or Above", group="VWAP Settings", display = display.data_window)
var anchor = input.string(defval = "Session", title="Anchor Period",
 options=["Session", "Week", "Month", "Quarter", "Year", "Decade", "Century", "Earnings", "Dividends", "Splits"], group="VWAP Settings")
src = input(title = "Source", defval = hlc3, group="VWAP Settings", display = display.data_window)
offset = input.int(0, title="Offset", group="VWAP Settings", minval=0, display = display.data_window)

BANDS_GROUP = "Bands Settings"
CALC_MODE_TOOLTIP = "Determines the units used to calculate the distance of the bands. When 'Percentage' is selected, a multiplier of 1 means 1%."
calcModeInput = input.string("Standard Deviation", "Bands Calculation Mode", options = ["Standard Deviation", "Percentage"], group = BANDS_GROUP, tooltip = CALC_MODE_TOOLTIP, display = display.data_window)
showBand_1 = input(true, title = "", group = BANDS_GROUP, inline = "band_1", display = display.data_window)
bandMult_1 = input.float(1.0, title = "Bands Multiplier #1", group = BANDS_GROUP, inline = "band_1", step = 0.5, minval=0, display = display.data_window)
showBand_2 = input(false, title = "", group = BANDS_GROUP, inline = "band_2", display = display.data_window)
bandMult_2 = input.float(2.0, title = "Bands Multiplier #2", group = BANDS_GROUP, inline = "band_2", step = 0.5, minval=0, display = display.data_window)
showBand_3 = input(false, title = "", group = BANDS_GROUP, inline = "band_3", display = display.data_window)
bandMult_3 = input.float(3.0, title = "Bands Multiplier #3", group = BANDS_GROUP, inline = "band_3", step = 0.5, minval=0, display = display.data_window)

// Safety checks
cumVolume = ta.cum(volume)
if barstate.islast and cumVolume == 0
    runtime.error("No volume data is provided by the data vendor.")

new_earnings   = request.earnings(syminfo.tickerid,   earnings.actual,   barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_dividends  = request.dividends(syminfo.tickerid,  dividends.gross,   barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)
new_split      = request.splits(syminfo.tickerid,     splits.denominator,barmerge.gaps_on, barmerge.lookahead_on, ignore_invalid_symbol=true)

isNewPeriod = switch anchor
    "Earnings"  => not na(new_earnings)
    "Dividends" => not na(new_dividends)
    "Splits"    => not na(new_split)
    "Session"   => timeframe.change("D")
    "Week"      => timeframe.change("W")
    "Month"     => timeframe.change("M")
    "Quarter"   => timeframe.change("3M")
    "Year"      => timeframe.change("12M")
    "Decade"    => timeframe.change("12M") and year % 10 == 0
    "Century"   => timeframe.change("12M") and year % 100 == 0
    => false

isEsdAnchor = anchor == "Earnings" or anchor == "Dividends" or anchor == "Splits"
if na(src[1]) and not isEsdAnchor
    isNewPeriod := true

float vwapValue         = na
float upperBandValue1   = na
float lowerBandValue1   = na
float upperBandValue2   = na
float lowerBandValue2   = na
float upperBandValue3   = na
float lowerBandValue3   = na

if not (hideonDWM and timeframe.isdwm)
    [_vwap, _stdevUpper, _] = ta.vwap(src, isNewPeriod, 1)
    vwapValue := _vwap
    stdevAbs  = _stdevUpper - _vwap
    bandBasis = calcModeInput == "Standard Deviation" ? stdevAbs : _vwap * 0.01

    upperBandValue1 := _vwap + bandBasis * bandMult_1
    lowerBandValue1 := _vwap - bandBasis * bandMult_1
    upperBandValue2 := _vwap + bandBasis * bandMult_2
    lowerBandValue2 := _vwap - bandBasis * bandMult_2
    upperBandValue3 := _vwap + bandBasis * bandMult_3
    lowerBandValue3 := _vwap - bandBasis * bandMult_3

// =========================================================================
// =                           RSI SETTINGS                                 =
// =========================================================================
rsiLength = input.int(14, title="RSI Length", group="RSI Settings")
rsiSource = input.source(close, "RSI Source", group="RSI Settings")
rsiValue  = ta.rsi(rsiSource, rsiLength)

// =========================================================================
// =                            CONDITIONS                                  =
// =========================================================================
rsiAbove70       = rsiValue > 70
priceHits2ndBand = ta.crossover(close, upperBandValue2)

// =========================================================================
// =                           VISUAL MARKERS                               =
// =========================================================================
//
// 1) Show a red label above the bar when RSI is above 70 and priceHits2ndBand.
//
plotshape(rsiAbove70 and priceHits2ndBand, title = "RSI Above 70 and priceHits2ndBand", style = shape.labeldown, location = location.top, color = color.new(color.red, 0), textcolor = color.white, size = size.tiny)

// =========================================================================
// =                            ALERTS                                      =
// =========================================================================

alertcondition(condition = rsiAbove70 and priceHits2ndBand, title = "RSI Above 70 and Price Hits 2nd Band", message = "Bear signal")